name: Theming CI/CD

on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
      theme:
        required: true
        type: string

    outputs:
      new_tag:
        description: The next determined tag based on the last PR body
        value: ${{ jobs.tag.outputs.new_tag }}


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: |
          export THEME=${{ inputs.theme }}
          make build

      - name: Run frontend TODO - use own backend?
        run: |
          export THEME=${{ inputs.theme }}
          make run_ci

      - name: Wait for max 10 seconds until frontend responds
        run: timeout 10 sh -c 'until curl http://$0:$1 ; do sleep 1; done' localhost 3000

      - name: Build e2e tests
        run: |
          cd e2e
          docker build --build-arg THEME=${{ inputs.theme }} -t cypress/unprivileged .

      - name: Run e2e tests
        run: |
          cd e2e
          docker run --net=host -u node cypress/unprivileged

      - name: Run Integration Tests
        run: echo TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO

  build:
    if: |
      needs.test.result == 'success' && ! startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: |
          export THEME=${{ inputs.theme }}
          make build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.6.1

      - name: Publish initial image based on branch to ECR
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads"* ]]; then
            branch="${GITHUB_REF/refs\/heads\//}"
            if [[ "${branch}" = "main" ]]; then
              docker_tag=latest
              docker tag ${{ inputs.repo-name }}-${{ inputs.theme }} "$ECR_REGISTRY/${{ inputs.repo-name }}-${{ inputs.theme }}:${docker_tag}"
              docker push "$ECR_REGISTRY/${{ inputs.repo-name }}-${{ inputs.theme }}:${docker_tag}"
            fi
          elif [[ "${GITHUB_REF}" != "refs/tags"* ]]; then
            echo "Assuming '${GITHUB_HEAD_REF}' is a branch"
            if [[ -n "${GITHUB_HEAD_REF}" ]]; then
                branch="$(echo ${GITHUB_HEAD_REF}| tr -c '[0-9,A-Z,a-z]' '-')"
                timestamp=$(date --utc -Iseconds | cut -c1-19 | tr -c '[0-9]T\n' '-')
                short_sha=${GITHUB_SHA:0:8}
                docker_tag="${branch}-${timestamp}-${short_sha}"
                docker tag ${{ inputs.repo-name }}-${{ inputs.theme }} "$ECR_REGISTRY/${{ inputs.repo-name }}-${{ inputs.theme }}:${docker_tag}"
                docker push "$ECR_REGISTRY/${{ inputs.repo-name }}-${{ inputs.theme }}:${docker_tag}"
            fi
          fi

  manual-semver:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    uses: climatepolicyradar/reusable-workflows/.github/workflows/tag.yml@v6
    secrets: inherit
    with:
      repo-name: ${{ inputs.repo-name }}-${{ inputs.theme }}
      semver-tag: main-${GITHUB_SHA::8}

  semver:
    if: ${{ github.ref == 'refs/heads/main' && needs.build.result == 'success'}}
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Determine new tag version
        id: determine_next_tag
        uses: climatepolicyradar/get-next-tag-from-pr-body@v2

      - name: Next tag found?
        run: |
          if [[ -z "${{ steps.determine_next_tag.outputs.new_tag }}" ]]; then
            exit 1;
          fi

      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retag latest SHA as new tag and push to ECR
        if: "${{ steps.determine_next_tag.outputs.new_tag }}"
        id: retag_and_push_to_ecr_new_tag
        uses: climatepolicyradar/retag-and-push-to-ecr@v1
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          repo-name: "${{ inputs.repo-name }}-${{ inputs.theme }}"
          semver-tag: main-${GITHUB_SHA::8}
          new-version: ${{ steps.determine_next_tag.outputs.new_tag }}
